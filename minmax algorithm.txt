import math

# Minimax function
def minimax(depth, node_index, maximizing_player, values, max_depth):
    # Base case: If we reach the maximum depth (a leaf node)
    if depth == max_depth:
        return values[node_index]

    if maximizing_player:
        max_eval = -math.inf
        for i in range(2):  # Each node has two children
            eval = minimax(depth + 1, node_index * 2 + i, False, values, max_depth)
            max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = math.inf
        for i in range(2):  # Each node has two children
            eval = minimax(depth + 1, node_index * 2 + i, True, values, max_depth)
            min_eval = min(min_eval, eval)
        return min_eval

# Example values at the leaf nodes of a binary tree
values = [3, 5, 2, 9, 12, 5, 23, 23]

# Define the depth of the game tree (in this case, log2(len(values)))
max_depth = math.log2(len(values))

# Start the minimax algorithm from the root (depth 0, node 0)
result = minimax(0, 0, True, values, int(max_depth))

print("The optimal value is:", result)
